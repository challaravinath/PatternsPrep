TWO SUM
===============
Problem Statement
--------------------
Given an array of integers nums and an integer target, return indices of the two numbers that add up to target.

Assumptions:
------------------
Each input has exactly one solution
You may not use the same element twice
Return the answer in any order

Examples
-------
Example 1:
Input: nums = [2, 7, 11, 15], target = 9
Output: [0, 1]
Explanation: nums[0] + nums[1] = 2 + 7 = 9

Example 2:
Input: nums = [3, 2, 4], target = 6
Output: [1, 2]
Explanation: nums[1] + nums[2] = 2 + 4 = 6

Example 3:
Input: nums = [3, 3], target = 6
Output: [0, 1]
Explanation: nums[0] + nums[1] = 3 + 3 = 6
```

---

## ðŸ¤” Thinking Process

### Step 1: Understand What We Need

For each number in the array, we need to find if there's **another number** that adds up to the target.
```
For target = 9:
- If we see 2, we need to find 7 (because 9 - 2 = 7)
- If we see 7, we need to find 2 (because 9 - 7 = 2)
- If we see 11, we need to find -2 (not in array)

The key insight: For each number, calculate what its "complement" should be!

Step 3: Optimized Approach (Hash Map!)
Key Insight: Instead of searching through the array again and again, store what we've seen in a hash map!
Algorithm:

Create a Dictionary to store: value â†’ index
For each number:

Calculate its complement: complement = target - num
Check if complement exists in our dictionary
If YES â†’ We found the pair! Return indices
If NO â†’ Store current number in dictionary for future lookups



Why This Works:

Dictionary lookup is O(1)
We only loop through the array once = O(n)
Total: O(n) time! ðŸš€